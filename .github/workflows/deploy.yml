name: Build and Deploy Docs

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    name: Build (PR)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Lint
        run: bun run lint

      - name: Build static export
        run: bun run build

  get-env:
    name: Resolve Environment
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      wrangler-env: ${{ steps.set-env.outputs.wrangler_env }}
    steps:
      - id: set-env
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "environment=production" >> "$GITHUB_OUTPUT"
            echo "wrangler_env=production" >> "$GITHUB_OUTPUT"
          elif [[ "${GITHUB_REF_NAME}" == "staging" ]]; then
            echo "environment=staging" >> "$GITHUB_OUTPUT"
            echo "wrangler_env=staging" >> "$GITHUB_OUTPUT"
          else
            echo "environment=preview" >> "$GITHUB_OUTPUT"
            echo "wrangler_env=" >> "$GITHUB_OUTPUT"
          fi

  deploy:
    name: Deploy to Cloudflare
    if: github.event_name == 'push'
    needs: get-env
    runs-on: ubuntu-latest
    environment: ${{ needs.get-env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Deploy static assets
        run: wrangler deploy --env ${{ needs.get-env.outputs.wrangler-env }}
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_WORKER_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_WORKER_API_TOKEN }}
          NEXT_PUBLIC_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_PROJECT_ID }}
